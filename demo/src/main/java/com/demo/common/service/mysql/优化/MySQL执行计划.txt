MySQL执行计划

调用方式:
    1. 基础执行计划:
        EXPLAIN ***;
    2. 详细执行计划: (开启查询优化器日志)
        SET optimizer_trace="enabled=on";
        SHOW VARIABLES LIKE 'optimizer_trace';
        EXPLAIN ***;
        select * from information_schema.OPTIMIZER_TRACE;

+----+-------------+-------+------------+--------+---------------+---------+---------+---------------+-------+----------+-------------+
| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref           | rows  | filtered | Extra       |
+----+-------------+-------+------------+--------+---------------+---------+---------+---------------+-------+----------+-------------+

id: ID列表明了该语句所在的层级
    如果ID相同从上到下执行
    如果ID不同则ID越大的越先执行
    其作用类似于执行计划中缩进
    也有特殊的,比如UNION RESULT在最后执行

select_type:  指明各“单位select 查询”的查询类型
    1.SIMPLE:   简单查询不包含子查询与union
    2.PRIMARY:  复杂查询创建的首要表(也是最外层的表) 这种类型通常与DERIVED 或者union 混合使用见到
                primary就是SQL在有子查询与union时 最外层的表 第一行(T4 )或者结果集 第二行( <derived2>)
    3.UNION:    当SELECT之前的关键字为UNION 或 UNION ALL时 会出现UNION 关键字
    4.DEPENDENT UNION:  当子查询中存在UNION 时 UNION 后的SELECT TYPE 会出现 DEPENDENT UNION 而union 语句的第一行为 DEPENDENT SUBQUERY
    5.UNION RESULT:     出现在UNION 或UNION ALL 语句中 代表把所有结果集联合起来
    6.SUBQUERY:         出现在复杂非相关子查询中 ,简单相关子查询MySQL会进行改写
    7.DEPENDENT SUBQUERY: 出现在相关子查询中 而非相关子查询MySQL可以进行改写
    8.DERIVED:  衍生表 当查询使用内联视图时 会出现此关键字
    9.MATERIALIZED:  子查询物化 当表出现在非相关子查询中 并且需要进行物化时会出现MATERIALIZED关键词
    10.UNCACHEABLE SUBQUERY:  子查询不可被物化 需要逐次运行
    11.UNCACHEABLE UNION:  同上 子查询中出现union 并且不可被缓存 在union 后的select 语句出现此关键词

table:
    1.表名: 访问的表, 即使访问的是索引 这里也显示访问的表名
    2.<unionM,N>: 由ID为M,N查询union产生的结果
    2.<subqueryN>: 由ID为N查询产生的结果

type:   表示的访问路径,及数据获取途径 一般来说，得保证查询至少达到range级别，最好能达到ref，否则就可能会出现性能问题
    优先级:null->system->const->eq-ref->ref->fulltext->ref_or_null->index_merge->unique_subquery->index_subquery->range->index->ALL
    1.null:     不访问任何表
    2.system:   一种特殊的const 要求表中只有一条记录
    3.const:    表示通过索引一次就找到了: 根据主键或者唯一二级索引列与常数进行等值匹配时，对单表的访问方法就是const
    4.eq_ref:   在连接查询时，如果被驱动表是通过主键或者唯一二级索引列等值匹配的方式进行访问的（如果该主键或者唯一二级索引是联合索引的话，所有的索引列都必须进行等值比较），则对该被驱动表的访问方法就是eq_ref
    5.ref:      当通过普通的二级索引列与常量进行等值匹配时来查询某个表，那么对该表的访问方法就可能是ref
    6.fulltext: 使用全文索引时出现
    7.ref_or_null: 当对普通二级索引进行等值匹配查询，该索引列的值也可以是NULL值时(查询条件中包含 is null) 也就是当谓词出现索引列等于某值或为空时出现(IS NULL)
    8.index_merge: 当谓词分别用到多个索引的首列,并且谓词连接为或时(OR): 索引合并
    9.unique_subquery: 如果查询优化器决定将IN子查询转换为EXISTS子查询，而且子查询可以使用到主键进行等值匹配的话，那么该子查询执行计划的type列的值就是unique_subquery
    10.index_subquery: index_subquery与unique_subquery类似，只不过访问子查询中的表时使用的是普通的索引。
    11.range:   通过范围方式访问索引
    12.index:   全索引扫描 索引全扫描 (比如返回结果集中只有索引列)
    13.ALL:     全表扫描

possible_keys:  可能被使用的索引 ,并不是所有的索引
key:            被使用的索引
key_len:        key_len 计算公式为
                变长字段: 可变长度*字符集位数+(如果可为null+1 否则+0)+2
                固定字段: eg:[int 4 + (not null +1, else 0 )]

ref:            关联谓词信息或常量; 当使用索引列等值匹配的条件去执行查询时，也就是在访问方法是const、eq_ref、ref、ref_or_null、unique_subquery、index_subquery其中之一时，ref列展示的就是与索引列作等值匹配的东西是什么，比如只是一个常数或者是某个列
rows:           如果查询优化器决定使用全表扫描的方式对某个表执行查询时，执行计划的rows列就代表预计需要扫描的行数，
                如果使用索引来执行查询时，执行计划的rows列就代表预计扫描的索引记录行数
Filtered:       代表查询优化器预测在这扫描的记录中，有多少条记录满足其余的搜索条件 (rows行记录中 满足要求的数据的占比)
Extra:          显示其他重要信息
    1.Using where           :当我们使用全表扫描来执行对某个表的查询，并且该语句的WHERE子句中有针对该表的搜索条件时
    2.Using index           :表示直接访问索引就足够获取到所需要的数据，不需要通过索引回表(覆盖索引)
    3.Using index condition :有些搜索条件中虽然出现了索引列，但却不能使用到索引 (比如在索引列上 like '%aa')
    3.Using where && Using index :
    4.Using temporary       :在许多查询的执行过程中，MySQL可能会借助临时表来完成一些功能，比如去重、排序之类的，比如我们在执行许多包含DISTINCT、GROUP BY、UNION等子句的查询过程中，如果不能有效利用索引来完成查询，MySQL很有可能寻求通过建立内部的临时表来执行查询
    5.Using filesort        :无法利用索引来完成的排序, 只能在内存中（记录较少的时候）或者磁盘中（记录较多的时候）进行排序，这种在内存中或者磁盘上进行排序的方式统称为文件排序 (注意: group by默认会先排序, 可以使用order by null禁用排序)
    6.Using join buffer     :在连接查询执行过程中，当被驱动表不能有效的利用索引加快访问速度，MySQL一般会为其分配一块名叫join buffer的内存块来加快查询速度。
    7.Impossible WHERE      :条件不成立

