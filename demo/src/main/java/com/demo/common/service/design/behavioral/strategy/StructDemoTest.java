package com.demo.common.service.design.behavioral.strategy;

import org.junit.Test;

/**
 * 5. 策略模式(Strategy Pattern)
 * <p>
 * 策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。
 * 策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。
 * <p>
 * 策略模式是一种对象行为型模式。
 * <p>
 * 举例:
 *
 * @author zhangj
 * @version $Id: StructDemoTest.java, v 0.1 2019/5/22 18:30 zhangj Exp $
 */

public class StructDemoTest {

    @Test
    public void test1() {

    }


}
/**
 * 5.8. 优点
 * 策略模式的优点
 * <p>
 * 策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。
 * 策略模式提供了管理相关的算法族的办法。
 * 策略模式提供了可以替换继承关系的办法。
 * 使用策略模式可以避免使用多重条件转移语句。
 * 5.9. 缺点
 * 策略模式的缺点
 * <p>
 * 客户端必须知道所有的策略类，并自行决定使用哪一个策略类。
 * 策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。
 * <p>
 * <p>
 * 策略模式与状态模式 :
 * <p>
 * 可以通过环境类状态的个数来决定是使用策略模式还是状态模式。
 * 策略模式的环境类自己选择一个具体策略类，具体策略类无须关心环境类；而状态模式的环境类由于外在因素需要放进一个具体状态中，以便通过其方法实现状态的切换，因此环境类和状态类之间存在一种双向的关联关系。
 * 使用策略模式时，客户端需要知道所选的具体策略是哪一个，而使用状态模式时，客户端无须关心具体状态，环境类的状态会根据用户的操作自动转换。
 * 如果系统中某个类的对象存在多种状态，不同状态下行为有差异，而且这些状态之间可以发生转换时使用状态模式；如果系统中某个类的某一行为存在多种实现方式，而且这些实现方式可以互换时使用策略模式。
 */
