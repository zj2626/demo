<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
       default-autowire="byName">

<!--    <bean id="MyBeanFactoryAware001" class="com.demo.common.service.bean.MyBeanFactoryAware" init-method="init"/>-->
<!--    <bean id="MyBeanNameAware001" class="com.demo.common.service.bean.MyBeanNameAware" init-method="init"/>-->

<!--    <context:component-scan base-package="com.demo.common.service.spring.*"/>-->
    <bean id="userDao" class="com.demo.common.service.spring.demo.UserDao"/>

    <bean id="injectUserDao" class="com.demo.common.service.spring.demo.InjectUserDao">
<!--        <property name="userDao" ref="userDao"/>-->
    </bean>
    <bean id="injectUserDao2" class="com.demo.common.service.spring.demo.InjectUserDao2">
<!--        <property name="userDao" ref="userDao"/>-->
    </bean>
    <bean id="injectUserDao3" class="com.demo.common.service.spring.demo.InjectUserDao3">
        <constructor-arg name="userDao" ref="userDao"/>
    </bean>

<!--    <context:annotation-config />-->

    <!-- redis属性文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:redis/redis.properties</value>
                <value>classpath:dubbo.properties</value>
            </list>
        </property>
    </bean>
    
    <bean id="throttlingJedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxTotal}" />
        <property name="minIdle" value="${redis.pool.minIdle}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWaitTime}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    </bean>

    <bean id="throttlingJedisSentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <constructor-arg name="propertySource">
            <bean class="org.springframework.core.io.support.ResourcePropertySource">
                <constructor-arg name="location" value="${redis.throttling.redis.sentinel.cluster.config_location}" />
            </bean>
        </constructor-arg>
    </bean>

    <bean id="throttlingJedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="sentinelConfig" ref="throttlingJedisSentinelConfiguration" />
        <constructor-arg name="poolConfig" ref="throttlingJedisPoolConfig" />
        <property name="password" value="${redis.pool.password}" />
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="throttlingJedisConnectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>

        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
        </property>

    </bean>

    <!--&lt;!&ndash; 启动缓存注解功能，否则缓解不会生效 &ndash;&gt;
    <cache:annotation-driven cache-manager="cacheManager"/>

    &lt;!&ndash; redis属性配置 &ndash;&gt;
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxTotal}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}" />
        <property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}" />
        <property name="softMinEvictableIdleTimeMillis" value="${redis.pool.softMinEvictableIdleTimeMillis}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    </bean>

    &lt;!&ndash; redis集群配置 哨兵模式 &ndash;&gt;
    <bean id="sentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                &lt;!&ndash;这个值要和Sentinel中指定的master的值一致，不然启动时找不到Sentinel会报错的&ndash;&gt;
                <property name="name" value="mymaster"></property>
            </bean>
        </property>
        &lt;!&ndash;记住了,这里是指定Sentinel的IP和端口，不是Master和Slave的&ndash;&gt;
        <property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.sentinel.host1}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.sentinel.port1}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.sentinel.host2}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.sentinel.port2}"></constructor-arg>
                </bean>
            </set>
        </property>
    </bean>
    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="sentinelConfig" ref="sentinelConfiguration"></constructor-arg>
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory"></property>
    </bean>
    &lt;!&ndash; 缓存管理器 &ndash;&gt;
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="redisTemplate" />
    </bean>-->


    <!--*********************************************************************

*********************************************-->

    <!--mybatis-->
    <bean id="dataSourceTest" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${zj.database.url}"/>
        <property name="username" value="${zj.database.username}"/>
        <property name="password" value="${zj.database.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="5"/>
        <property name="maxActive" value="1000"/>

        <!-- 配置获取连接等待超时的时间 -->
        <!-- c3p0 checkoutTimeout default 0 -->
        <property name="maxWait" value="5000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <!-- c3p0 idleConnectionTestPeriod our config is 300s -->
        <property name="timeBetweenEvictionRunsMillis" value="300000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <!-- c3p0 maxIdleTime out config is 30s -->
        <property name="minEvictableIdleTimeMillis" value="30000"/>

        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        <!-- property name="testWhileIdle" value="false" / -->
        <property name="testOnBorrow" value="true"/>
        <!-- property name="testOnReturn" value="false" / -->

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <!-- property name="maxPoolPreparedStatementPerConnectionSize" value="20" / -->

        <!-- 配置监控统计拦截的filters -->
        <!-- property name="filters" value="stat" / -->
        <property name="proxyFilters">
            <list>
                <bean class="com.alibaba.druid.filter.stat.StatFilter">
                    <property name="mergeSql" value="true"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="sqlSessionFactoryTest" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath:META-INF/mybatis/xml/*.xml"/>
        <property name="dataSource" ref="dataSourceTest"/>
    </bean>

    <bean id="ordersMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.demo.common.service.mysql.dal.mapper.OrdersMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactoryTest"/>
    </bean>

    <bean id="lineitemMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.demo.common.service.mysql.dal.mapper.LineitemMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactoryTest"/>
    </bean>

    <!--<bean id="dataSourceMerchant" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
        <property name="url" value="jdbc:mysql://192.168.1.233/merchant?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=round"/>
        <property name="username" value="root"/>
        <property name="password" value="sql@kdn!123"/>

        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="5"/>
        <property name="maxActive" value="1000"/>

        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        &lt;!&ndash; c3p0 checkoutTimeout default 0 &ndash;&gt;
        <property name="maxWait" value="5000"/>

        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        &lt;!&ndash; c3p0 idleConnectionTestPeriod our config is 300s &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="300000"/>

        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        &lt;!&ndash; c3p0 maxIdleTime out config is 30s &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="30000"/>

        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        &lt;!&ndash; property name="testWhileIdle" value="false" / &ndash;&gt;
        <property name="testOnBorrow" value="true"/>
        &lt;!&ndash; property name="testOnReturn" value="false" / &ndash;&gt;

        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
        <property name="poolPreparedStatements" value="false"/>
        &lt;!&ndash; property name="maxPoolPreparedStatementPerConnectionSize" value="20" / &ndash;&gt;

        &lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;
        &lt;!&ndash; property name="filters" value="stat" / &ndash;&gt;
        <property name="proxyFilters">
            <list>
                <bean class="com.alibaba.druid.filter.stat.StatFilter">
                    <property name="mergeSql" value="true"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="sqlSessionFactoryMerchant" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath:META-INF/mybatis/xml/*.xml"/>
        <property name="dataSource" ref="dataSourceMerchant"/>
    </bean>

    <bean id="shipperEntranceSettingMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.demo.common.service.mysql.dal.mapper.ShipperEntranceSettingMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactoryMerchant"/>
    </bean>-->

    <bean id="exterfaceInvokeHttpSender" class="com.demo.common.service.mysql.company.ExterfaceInvokeHttpSender">
        <property name="contentType" value="application/json; charset=UTF-8" />
        <property name="connectionTimeout" value="15000" />
        <property name="readTimeout" value="15000" />
    </bean>
</beans>