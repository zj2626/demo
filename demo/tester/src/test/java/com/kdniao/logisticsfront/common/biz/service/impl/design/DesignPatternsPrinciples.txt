一.单一职责原则
    单一职责原则(Single Responsibility Principle, SRP)：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。
     单一职责原则是实现高内聚、低耦合的指导方针

二.开闭原则
    开闭原则(Open-Closed Principle, OCP)：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。
    抽象化是开闭原则的关键

三.里氏替换原则
    里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象。
    在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象
    在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。
    里氏代换原则是实现开闭原则的重要方式之一

四.依赖倒置原则
    依赖倒转原则(Dependency Inversion Principle, DIP)：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。
    依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明，以及数据类型的转换等，而不要用具体类来做这些事情。
    为了确保该原则的应用，一个具体类应当只实现接口或抽象类中声明过的方法，而不要给出多余的方法，否则将无法调用到在子类中增加的新方法。
    在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过依赖注入(DependencyInjection, DI)的方式注入到其他对象中，依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。
    常用的注入方式有三种，分别是：构造注入，设值注入（Setter注入）和接口注入
        *****开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段****

五.接口隔离原则
    接口隔离原则(Interface Segregation Principle, ISP)：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。
    每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干
    接口仅仅提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的单独的接口，而不要提供大的总接口

六.迪米特法则
    迪米特法则(Law of Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。
    只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：
          (1) 当前对象本身(this)；
          (2) 以参数形式传入到当前对象方法中的对象；
          (3) 当前对象的成员对象；
          (4) 如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；
          (5) 当前对象所创建的对象。
    应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，
    如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用
    通过引入一个合理的第三者来降低现有对象之间的耦合度
