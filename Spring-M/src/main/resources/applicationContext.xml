<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://code.alibabatech.com/schema/dubbo
    http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-autowire="byName">

    <context:component-scan base-package="hello"/>
    <context:property-placeholder location="classpath:prop.properties,classpath:dubbo.properties"/>

    <!--******************************************************************************************************************-->

    <!--
    <bean id="serviceLocator" class="hello.web.DefaultServiceLocator"/>
    <bean id="greeting3" factory-bean="serviceLocator" factory-method="getGreeting"/>

    <bean id="hello" class="hello.web.Hello" scope="prototype">
        <property name="name" value="a"/>
        <property name="md" ref="setMethod"/>
    </bean>
    <bean id="hello2" class="hello.web.Hello" lazy-init="true">
        <property name="name" value="b"/>
    </bean>
    <bean id="greeting" class="hello.web.Greeting" factory-method="getInstance"/>
    <bean id="greeting2" class="hello.web.Greeting" factory-method="getInstance2"/>
    <bean id="greeting4" class="hello.web.Greeting" factory-method="getInstance"/>
    <bean id="greeting5" class="hello.web.Greeting">
        <constructor-arg name="id" value="1"/>
        <constructor-arg name="content" value="ccc"/>
        <property name="hello" ref="hello"/>
    </bean>
    <bean id="setMethod" class="hello.web.SetMethod">
        &lt;!&ndash;<constructor-arg name="name" value="123"/>&ndash;&gt;
        <property name="name" value="sss"/>
        &lt;!&ndash;<aop:scoped-proxy/>&ndash;&gt;
    </bean>

    <alias name="hello" alias="helloFuck"/>
    <alias name="helloFuck" alias="helloFuckTo"/>

    <bean id="ga"
          class="hello.web.Greeting"
          p:id="1"
          p:content="abc"/>

    <bean id="gb" class="hello.web.Greeting"
          c:id="1"
          c:content="abc"/>

    <bean id="myManger" class="hello.bean.MyManger"/>
    <bean id="myManger2" class="hello.bean.MyManger2"/>
    -->

    <!--<bean id="simpleMovieLister" class="hello.annotation.SimpleMovieLister" scope="prototype"/>-->
    <!--<bean id="simpleMovieLister2" class="hello.annotation.SimpleMovieLister" scope="prototype"/>-->
    <!--<bean id="movieRecommender" class="hello.annotation.MovieRecommender" scope="prototype"/>-->
    <!--<bean id="movieRecommender2" class="hello.annotation.MovieRecommender" scope="prototype"/>-->

    <!--<bean id="myBeanFactoryPostProcessor" class="hello.lifecycle.MyBeanFactoryPostProcessor"/>-->
    <!--<bean id="myInstantiationAwareBeanPostProcessor" class="hello.lifecycle.MyInstantiationAwareBeanPostProcessor"/>-->
    <!--<bean id="myBeanPostProcessor" class="hello.lifecycle.MyBeanPostProcessor"/>-->
    <!--<bean id="beanLevel" class="hello.lifecycle.BeanLevel" init-method="initMethod" destroy-method="destroyMethod" p:name="张三" p:address="广州" p:phone="${tea.beanLevel_phone}"/>-->
    <!--<bean id="myFactoryBean" class="hello.lifecycle.MyFactoryBean"/>-->

    <!--******************************************************************************************************************-->

    <bean id="exterfaceInvokeIOHttpSender" class="hello.request.ExterfaceInvokeIOHttpSender">
        <property name="hostname" value="http://127.0.0.1:8073" />
        <property name="appName" value="" />
        <property name="contentType" value="application/json; charset=UTF-8" />
        <property name="maxTotalConnection" value="200" />
        <property name="readTimeout" value="5000" />
        <property name="connectionTimeout" value="5000" />
    </bean>

    <!--redis-->
    <bean id="throttlingJedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="100"/>
        <property name="maxIdle" value="100"/>
        <property name="minIdle" value="10"/>
        <property name="maxWaitMillis" value="1000"/>
        <property name="testOnBorrow" value="true"/>
    </bean>

    <bean id="throttlingJedisSentinelConfiguration"
          class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <constructor-arg name="propertySource">
            <bean class="org.springframework.core.io.support.ResourcePropertySource">
                <constructor-arg name="location" value="${throttling.redis.sentinel.cluster.config_location}"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="throttlingJedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="sentinelConfig" ref="throttlingJedisSentinelConfiguration"/>
        <constructor-arg name="poolConfig" ref="throttlingJedisPoolConfig"/>
        <property name="password" value="kdniao2017"/>
    </bean>

    <bean id="throttlingRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="throttlingJedisConnectionFactory"/>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>

    <!--******************************************************************************************************************-->

    <!--dubbo-->
    <!--消费者-->
    <!--应用名-->
    <!--<dubbo:application name="${dubbo.application.name}"/>-->
    <!--注册中心地址-->
    <dubbo:registry address="zookeeper://${dubbo.registry.address}"/> <!--file="H:/dubbo.cache"-->
    <!--生成远程服务代理 作为可调用的bean-->
    <dubbo:reference id="doWithAnnotation" interface="hello.service.DoWithAnnotation" group="${dubbo.group}"
                     cache="true"/>

    <dubbo:reference id="doHSomething" interface="hello.service.DoHSomething" group="${dubbo.group}"
                     filter="myFilter,default">
        <!--<dubbo:method name="sayHello" async="true" return="true"/>-->
        <!--<dubbo:method name="sayFuck"/>-->
    </dubbo:reference>

    <dubbo:consumer check="false" timeout="10000" group="${dubbo.default.group}"/>

    <!--******************************************************************************************************************-->

    <!--kafka-->
    <!--消费者-->
    <bean id="kafkaConsumerFactory" class="org.springframework.kafka.core.DefaultKafkaConsumerFactory">
        <constructor-arg>
            <map>
                <entry key="bootstrap.servers" value="${kafka.bootstrap.servers}"/>
                <entry key="group.id" value="group-0"/>
                <entry key="enable.auto.commit" value="false"/>
<!--                <entry key="auto.offset.reset" value="latest"/>-->
                <entry key="auto.commit.interval.ms" value="1000"/>
                <entry key="session.timeout.ms" value="15000"/>
                <entry key="key.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>
                <entry key="value.deserializer" value="org.apache.kafka.common.serialization.ByteArrayDeserializer"/>
            </map>
        </constructor-arg>
    </bean>
    <bean id="kafkaConsumerFactory2" class="org.springframework.kafka.core.DefaultKafkaConsumerFactory">
        <constructor-arg>
            <map>
                <entry key="bootstrap.servers" value="${kafka.bootstrap.servers}"/>
                <entry key="group.id" value="group-10"/>
                <entry key="enable.auto.commit" value="true"/>       <!--consumer定期地往Kafka写入每个分区的offset-->
                <entry key="auto.commit.interval.ms" value="60000"/> <!--往Kafka上写offset的频率(consumer-offset每60s一次提交)-->
                <entry key="session.timeout.ms" value="15000"/>
                <entry key="key.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>
                <entry key="value.deserializer" value="org.apache.kafka.common.serialization.ByteArrayDeserializer"/>
            </map>
        </constructor-arg>
    </bean>

    <!--<bean id="concurrentKafkaListenerContainerFactory" class="org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory"></bean>-->

    <!--消费者容器配置信息-->
    <bean id="containerProperties" class="org.springframework.kafka.listener.config.ContainerProperties">
        <constructor-arg>
            <array>
                <value>kfk-to-topic-zj</value>
                <value>kfk-to-topic-zj-05</value>
                <value>defaultTopic-zj</value>
            </array>
        </constructor-arg>  <!--topics-->

        <!--执行消息消费的类-->
        <property name="messageListener" ref="getSomething1"/> <!--MessageListener 监听方法-->
        <!--<property name="ackMode" value=""/>-->
    </bean>

    <!-- 创建kafkatemplate bean，使用的时候，只需要注入这个bean，即可使用template的send消息方法 -->
    <!--单线程消费-->
    <!--<bean id="messageListenerContainer" class="org.springframework.kafka.listener.KafkaMessageListenerContainer"
          init-method="doStart">
        <constructor-arg ref="kafkaConsumerFactory"/>
        <constructor-arg ref="containerProperties"/>
    </bean>-->

    <!--多线程消费 并发-->
    <!--concurrency==partition数量:高级消费; concurrency!=partition数量:低级消费-->
    <bean id="concurrentMessageListenerContainer-001"
          class="org.springframework.kafka.listener.ConcurrentMessageListenerContainer"
          init-method="doStart">
        <constructor-arg ref="kafkaConsumerFactory"/>
        <constructor-arg ref="containerProperties"/>
        <property name="concurrency" value="10"/> <!--创建10个KafkaMessageListenerContainer线程 -->
        <!-- 线程多于partition则多于部分没有可消费,少于则一个线程消费多个partition-->
        <!--一个partition中，对于一个consumer group只能有一个线程消费，所以不存在多线程并发的问题-->
    </bean>

    <!--另一个分组的消费者,消费同一个topic-->
    <bean id="concurrentMessageListenerContainer-002"
          class="org.springframework.kafka.listener.ConcurrentMessageListenerContainer" init-method="doStart">
        <constructor-arg ref="kafkaConsumerFactory2"/>
        <constructor-arg>
            <bean class="org.springframework.kafka.listener.config.ContainerProperties">
                <constructor-arg>
                    <array>
                        <value>kfk-to-topic-zj</value>
                        <value>kfk-to-topic-zj-05</value>
                    </array>
                </constructor-arg>

                <property name="messageListener" ref="getSomething2"/>
            </bean>
        </constructor-arg>
        <property name="concurrency" value="5"/>
    </bean>

    <!--新加的消费者,从头消费同一个topic-->
    <!--<bean id="concurrentMessageListenerContainer-003"
          class="org.springframework.kafka.listener.ConcurrentMessageListenerContainer" init-method="doStart">
        <constructor-arg>
            <bean class="org.springframework.kafka.core.DefaultKafkaConsumerFactory">
                <constructor-arg>
                    <map>
                        <entry key="bootstrap.servers" value="${kafka.bootstrap.servers}"/>
                        <entry key="group.id" value="gp-test"/>
                        &lt;!&ndash;从头消费&ndash;&gt;
                        <entry key="auto.offset.reset" value="earliest"/>
                        <entry key="enable.auto.commit" value="false"/>
                        <entry key="auto.commit.interval.ms" value="1000"/>
                        <entry key="session.timeout.ms" value="15000"/>
                        <entry key="key.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>
                        <entry key="value.deserializer"
                               value="org.apache.kafka.common.serialization.ByteArrayDeserializer"/>
                    </map>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.springframework.kafka.listener.config.ContainerProperties">
                <constructor-arg>
                    <array>
                        <value>kfk-to-topic-zj-05</value>
                    </array>
                </constructor-arg>

                <property name="messageListener" ref="getSomething3"/>
            </bean>
        </constructor-arg>
        <property name="concurrency" value="5"/>
    </bean>-->

    <!--******************************************************************************************************************-->

    <!--mybatis-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${zj.database.url}"/>
        <property name="username" value="${zj.database.username}"/>
        <property name="password" value="${zj.database.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="5"/>
        <property name="maxActive" value="1000"/>

        <!-- 配置获取连接等待超时的时间 -->
        <!-- c3p0 checkoutTimeout default 0 -->
        <property name="maxWait" value="${zj.database.pool.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <!-- c3p0 idleConnectionTestPeriod our config is 300s -->
        <property name="timeBetweenEvictionRunsMillis" value="300000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <!-- c3p0 maxIdleTime out config is 30s -->
        <property name="minEvictableIdleTimeMillis" value="30000"/>

        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        <!-- property name="testWhileIdle" value="false" / -->
        <property name="testOnBorrow" value="true"/>
        <!-- property name="testOnReturn" value="false" / -->

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <!-- property name="maxPoolPreparedStatementPerConnectionSize" value="20" / -->

        <!-- 配置监控统计拦截的filters -->
        <!-- property name="filters" value="stat" / -->
        <property name="proxyFilters">
            <list>
                <bean class="com.alibaba.druid.filter.stat.StatFilter">
                    <property name="mergeSql" value="true"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="zjSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath:META-INF/dal/*.xml"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="areaDOMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="hello.data.mapper.UCAreaDOMapper"/>
        <property name="sqlSessionFactory" ref="zjSqlSessionFactory"/>
    </bean>

    <bean id="testcMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="hello.data.mapper.TestcMapper"/>
        <property name="sqlSessionFactory" ref="zjSqlSessionFactory"/>
    </bean>

    <!--******************************************************************************************************************-->

    <!-- jdbc事务管理器 id命名为transactionManager时,声明式事务引用到的地方可省略-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>

    <!--编程式事务管理-->
    <!--事务模板-->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <constructor-arg name="transactionManager" ref="transactionManager"/>
    </bean>

    <!--基于 TransactionProxy的声明式事务管理[不建议] (没效果?)-->
    <!--<bean id="tpFactoryBean" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="target" ref="doSomething"/>
        &lt;!&ndash;事务规则&ndash;&gt;
        <property name="transactionAttributes">
            <props>
                <prop key="dotransaction*">PROPAGATION_REQUIRED,-Exception</prop>
            </props>
        </property>
    </bean>-->

    <!--基于 <tx> 命名空间的声明式事务管理-->
    <tx:advice id="zjAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>

            <tx:method name="dotransactionTX*" propagation="REQUIRED" isolation="DEFAULT"/> <!--DEFAULT == REPEATABLE_READ-->
            <!--<tx:method name="dotransactionTX*" propagation="REQUIRED" isolation="READ_UNCOMMITTED"/> &lt;!&ndash;读未提交,但会导致脏读&ndash;&gt;-->
            <!--<tx:method name="dotransactionTX*" propagation="REQUIRED" isolation="READ_COMMITTED"/>  &lt;!&ndash;读提交,但会导致不可重复读(多次读数据不一致)&ndash;&gt;-->
            <!--<tx:method name="dotransactionTX*" propagation="REQUIRED" isolation="REPEATABLE_READ"/> &lt;!&ndash;可重复读,但会导致幻读&ndash;&gt;-->
            <!--<tx:method name="dotransactionTX*" propagation="REQUIRED" isolation="SERIALIZABLE"/>-->
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="zjPointcut" expression="execution(* *.dotransactionTX*(..))"/>
        <aop:advisor advice-ref="zjAdvice" pointcut-ref="zjPointcut"/>
    </aop:config>

    <!--基于 @Transactional 的声明式事务管理-->
    <!--Spring 使用 BeanPostProcessor 来处理 Bean 中的标注-->
    <!--@Transactional 注解只能被应用到 public 方法上-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--<aop:aspectj-autoproxy proxy-target-class="true" /> &lt;!&ndash;expose-proxy="true"&ndash;&gt;-->

    <!--******************************************************************************************************************-->

    <bean id="curatorRetryPolicy" class="org.apache.curator.retry.ExponentialBackoffRetry">
        <constructor-arg name="maxRetries" value="3" />
        <constructor-arg name="baseSleepTimeMs" value="1000" />
    </bean>

    <bean id="curatorFrameworkFactory" class="org.apache.curator.framework.CuratorFrameworkFactory" factory-method="newClient">
        <constructor-arg name="connectString" value="${dubbo.registry.address}"/>
        <constructor-arg name="retryPolicy" ref="curatorRetryPolicy"/>
        <constructor-arg name="sessionTimeoutMs" value="60000"/>
        <constructor-arg name="connectionTimeoutMs" value="30000"/>
    </bean>

    <bean name="lockUtils" class="hello.lock.LockUtils">
        <property name="curatorFramework" ref="curatorFrameworkFactory"/>
    </bean>
</beans>